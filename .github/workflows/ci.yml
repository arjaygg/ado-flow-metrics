name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-html

    - name: Run pre-commit hooks
      uses: pre-commit/action@v3.0.0

    - name: Run tests with coverage
      run: |
        python -m pytest tests/ -v \
          --cov=src \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term \
          --cov-fail-under=85 \
          --html=reports/pytest_report.html \
          --self-contained-html

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          reports/
          htmlcov/

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety

    - name: Run Bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json --skip B101
        bandit -r src/ --skip B101

    - name: Check for known vulnerabilities
      run: safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  lint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy types-requests

    - name: Check code formatting
      run: black --check --diff .

    - name: Check import sorting
      run: isort --check-only --diff .

    - name: Run flake8
      run: flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503

    - name: Run mypy type checking
      run: mypy src/ --ignore-missing-imports --no-strict-optional

  integration:
    runs-on: ubuntu-latest
    needs: [test, security, lint]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run integration tests
      run: |
        python -m pytest tests/ -k "integration" -v || echo "No integration tests found"

    - name: Test CLI commands
      run: |
        python -m src.cli --help
        python -m src.cli mock --help
        python -m src.cli calculate --help

    - name: Test dashboard generation
      run: |
        mkdir -p data
        python -m src.cli mock --output data/test_items.json --count 10
        python -m src.cli calculate --input data/test_items.json --output data/test_report.json

  build:
    runs-on: ubuntu-latest
    needs: [test, security, lint, integration]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install build tools
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: python -m build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: package-builds
        path: dist/

  notify:
    runs-on: ubuntu-latest
    needs: [test, security, lint, integration]
    if: always()

    steps:
    - name: Notify on success
      if: needs.test.result == 'success' && needs.security.result == 'success' && needs.lint.result == 'success'
      run: echo "✅ All checks passed! Ready for review/merge."

    - name: Notify on failure
      if: needs.test.result == 'failure' || needs.security.result == 'failure' || needs.lint.result == 'failure'
      run: |
        echo "❌ Some checks failed:"
        echo "Tests: ${{ needs.test.result }}"
        echo "Security: ${{ needs.security.result }}"
        echo "Lint: ${{ needs.lint.result }}"
        echo "Integration: ${{ needs.integration.result }}"
        exit 1
